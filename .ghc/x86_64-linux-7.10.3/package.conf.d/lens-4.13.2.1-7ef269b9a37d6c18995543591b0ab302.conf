name: lens
version: 4.13.2.1
id: lens-4.13.2.1-7ef269b9a37d6c18995543591b0ab302
key: lens_0f1h8kfSy2H9wXZb3I8k5L
license: BSD3
copyright: Copyright (C) 2012-2016 Edward A. Kmett
maintainer: Edward A. Kmett <ekmett@gmail.com>
stability: provisional
homepage: http://github.com/ekmett/lens/
synopsis: Lenses, Folds and Traversals
description:
    This package comes \"Batteries Included\" with many useful lenses for the types
    commonly used from the Haskell Platform, and with tools for automatically
    generating lenses and isomorphisms for user-supplied data types.
    .
    The combinators in @Control.Lens@ provide a highly generic toolbox for composing
    families of getters, folds, isomorphisms, traversals, setters and lenses and their
    indexed variants.
    .
    An overview, with a large number of examples can be found in the <https://github.com/ekmett/lens#lens-lenses-folds-and-traversals README>.
    .
    An introductory video on the style of code used in this library by Simon Peyton Jones is available from <http://skillsmatter.com/podcast/scala/lenses-compositional-data-access-and-manipulation Skills Matter>.
    .
    A video on how to use lenses and how they are constructed is available on <http://youtu.be/cefnmjtAolY?hd=1 youtube>.
    .
    Slides for that second talk can be obtained from <http://comonad.com/haskell/Lenses-Folds-and-Traversals-NYC.pdf comonad.com>.
    .
    More information on the care and feeding of lenses, including a brief tutorial and motivation
    for their types can be found on the <https://github.com/ekmett/lens/wiki lens wiki>.
    .
    A small game of @pong@ and other more complex examples that manage their state using lenses can be found in the <https://github.com/ekmett/lens/blob/master/examples/ example folder>.
    .
    /Lenses, Folds and Traversals/
    .
    With some signatures simplified, the core of the hierarchy of lens-like constructions looks like:
    .
    .
    <<http://i.imgur.com/ALlbPRa.png>>
    .
    <Hierarchy.png (Local Copy)>
    .
    You can compose any two elements of the hierarchy above using @(.)@ from the @Prelude@, and you can
    use any element of the hierarchy as any type it linked to above it.
    .
    The result is their lowest upper bound in the hierarchy (or an error if that bound doesn't exist).
    .
    For instance:
    .
    * You can use any 'Traversal' as a 'Fold' or as a 'Setter'.
    .
    * The composition of a 'Traversal' and a 'Getter' yields a 'Fold'.
    .
    /Minimizing Dependencies/
    .
    If you want to provide lenses and traversals for your own types in your own libraries, then you
    can do so without incurring a dependency on this (or any other) lens package at all.
    .
    /e.g./ for a data type:
    .
    > data Foo a = Foo Int Int a
    .
    You can define lenses such as
    .
    > -- bar :: Lens' (Foo a) Int
    > bar :: Functor f => (Int -> f Int) -> Foo a -> f (Foo a)
    > bar f (Foo a b c) = fmap (\a' -> Foo a' b c) (f a)
    .
    > -- quux :: Lens (Foo a) (Foo b) a b
    > quux :: Functor f => (a -> f b) -> Foo a -> f (Foo b)
    > quux f (Foo a b c) = fmap (Foo a b) (f c)
    .
    without the need to use any type that isn't already defined in the @Prelude@.
    .
    And you can define a traversal of multiple fields with 'Control.Applicative.Applicative':
    .
    > -- traverseBarAndBaz :: Traversal' (Foo a) Int
    > traverseBarAndBaz :: Applicative f => (Int -> f Int) -> Foo a -> f (Foo a)
    > traverseBarAndBaz f (Foo a b c) = Foo <$> f a <*> f b <*> pure c
    .
    What is provided in this library is a number of stock lenses and traversals for
    common haskell types, a wide array of combinators for working them, and more
    exotic functionality, (/e.g./ getters, setters, indexed folds, isomorphisms).
category: Data, Lenses, Generics
author: Edward A. Kmett
exposed: True
exposed-modules:
    Control.Exception.Lens Control.Lens Control.Lens.At
    Control.Lens.Combinators Control.Lens.Cons Control.Lens.Each
    Control.Lens.Empty Control.Lens.Equality Control.Lens.Extras
    Control.Lens.Fold Control.Lens.Getter Control.Lens.Indexed
    Control.Lens.Internal Control.Lens.Internal.Bazaar
    Control.Lens.Internal.ByteString Control.Lens.Internal.Coerce
    Control.Lens.Internal.Context Control.Lens.Internal.Deque
    Control.Lens.Internal.Exception Control.Lens.Internal.FieldTH
    Control.Lens.Internal.PrismTH Control.Lens.Internal.Fold
    Control.Lens.Internal.Getter Control.Lens.Internal.Indexed
    Control.Lens.Internal.Instances Control.Lens.Internal.Iso
    Control.Lens.Internal.Level Control.Lens.Internal.List
    Control.Lens.Internal.Magma Control.Lens.Internal.Prism
    Control.Lens.Internal.Review Control.Lens.Internal.Setter
    Control.Lens.Internal.TH Control.Lens.Internal.Zoom
    Control.Lens.Iso Control.Lens.Lens Control.Lens.Level
    Control.Lens.Operators Control.Lens.Plated Control.Lens.Prism
    Control.Lens.Reified Control.Lens.Review Control.Lens.Setter
    Control.Lens.TH Control.Lens.Traversal Control.Lens.Tuple
    Control.Lens.Type Control.Lens.Wrapped Control.Lens.Zoom
    Control.Monad.Error.Lens Control.Parallel.Strategies.Lens
    Control.Seq.Lens Data.Array.Lens Data.Bits.Lens
    Data.ByteString.Lens Data.ByteString.Strict.Lens
    Data.ByteString.Lazy.Lens Data.Complex.Lens Data.Data.Lens
    Data.Dynamic.Lens Data.HashSet.Lens Data.IntSet.Lens Data.List.Lens
    Data.Map.Lens Data.Sequence.Lens Data.Set.Lens Data.Text.Lens
    Data.Text.Strict.Lens Data.Text.Lazy.Lens Data.Tree.Lens
    Data.Typeable.Lens Data.Vector.Lens Data.Vector.Generic.Lens
    Generics.Deriving.Lens GHC.Generics.Lens System.Exit.Lens
    System.FilePath.Lens System.IO.Error.Lens Language.Haskell.TH.Lens
    Numeric.Lens
hidden-modules: Paths_lens
trusted: False
import-dirs: /home/jmo/.cabal/lib/x86_64-linux-ghc-7.10.3/lens-4.13.2.1-0f1h8kfSy2H9wXZb3I8k5L
library-dirs: /home/jmo/.cabal/lib/x86_64-linux-ghc-7.10.3/lens-4.13.2.1-0f1h8kfSy2H9wXZb3I8k5L
data-dir: /home/jmo/.cabal/share/x86_64-linux-ghc-7.10.3/lens-4.13.2.1
hs-libraries: HSlens-4.13.2.1-0f1h8kfSy2H9wXZb3I8k5L
depends:
    array-0.5.1.0-960bf9ae8875cc30355e086f8853a049
    base-4.8.2.0-0d6d1084fbc041e1cded9228e80e264d
    base-orphans-0.5.3-d2110f3b0d07b67c48bf5cca13f2d1ca
    bifunctors-5.3-e87deb97e31788d4118d24c8501447e5
    bytestring-0.10.6.0-c60f4c543b22c7f7293a06ae48820437
    comonad-5-506ba5270fd3196dbb4621af08de907c
    containers-0.5.6.2-e59c9b78d840fa743d4169d4bea15592
    contravariant-1.4-b3f3c81881777a17b4d909585b942f1d
    distributive-0.5.0.2-b71260f5f191afe6af987aa180c2c6b0
    exceptions-0.8.2.1-025f2b7f8687e83155e778b639159217
    filepath-1.4.0.0-f97d1e4aebfd7a03be6980454fe31d6e
    free-4.12.4-1dee776f7fc7152b7a223c9cdea2cbd6
    ghc-prim-0.4.0.0-6cdc86811872333585fa98756aa7c51e
    hashable-1.2.4.0-2f6e980fdeff3f16111d43036e99487a
    kan-extensions-5.0.1-28981e275480fc173f046505e8d24b0a
    mtl-2.2.1-3af90341e75ee52dfc4e3143b4e5d219
    parallel-3.2.1.0-13fa56575e4752a542f0b618706881f7
    profunctors-5.2-d863717d8307889cea65dbbf080d4da8
    reflection-2.1.2-a1800076486d650159694cb5f635481f
    semigroupoids-5.0.1-f910f99aba1abe64860fb0bdd3d4b7a3
    semigroups-0.18.1-0b973864a94a83937669009b4e06c027
    tagged-0.8.3-21c7d9e94c80e78986722ec9a3df67cf
    template-haskell-2.10.0.0-3c4cb52230f347282af9b2817f013181
    text-1.2.2.1-d0adb978563e9f52dc308d1d0db7212c
    transformers-0.4.2.0-81450cd8f86b36eaa8fa0cbaf6efc3a3
    transformers-compat-0.5.1.4-0ed5101ea925318f0fb3faf5fdfd6220
    unordered-containers-0.2.7.0-fd1fc5881b5267f169202fbad1787983
    vector-0.11.0.0-299aefb173ce5a731565d31f609a0cfd
    void-0.7.1-d9df037cb40f3ba5552108b6fb4b4ab9
haddock-interfaces: /home/jmo/.cabal/share/doc/x86_64-linux-ghc-7.10.3/lens-4.13.2.1/html/lens.haddock
haddock-html: /home/jmo/.cabal/share/doc/x86_64-linux-ghc-7.10.3/lens-4.13.2.1/html
